[{"C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\index.js":"1","C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\App.js":"2","C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\pages\\SavedBooks.js":"3","C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\pages\\SearchBooks.js":"4","C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\components\\Navbar.js":"5","C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\components\\LoginForm.js":"6","C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\components\\SignupForm.js":"7","C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\utils\\auth.js":"8","C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\utils\\localStorage.js":"9","C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\utils\\API.js":"10","C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\utils\\queries.js":"11","C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\utils\\mutations.js":"12"},{"size":266,"mtime":1674318817972,"results":"13","hashOfConfig":"14"},{"size":1812,"mtime":1674339483642,"results":"15","hashOfConfig":"14"},{"size":2946,"mtime":1674318817973,"results":"16","hashOfConfig":"14"},{"size":4901,"mtime":1674341226656,"results":"17","hashOfConfig":"14"},{"size":2524,"mtime":1674318817972,"results":"18","hashOfConfig":"14"},{"size":3234,"mtime":1674340382235,"results":"19","hashOfConfig":"14"},{"size":3910,"mtime":1674339872893,"results":"20","hashOfConfig":"14"},{"size":1234,"mtime":1674318817974,"results":"21","hashOfConfig":"14"},{"size":793,"mtime":1674318817974,"results":"22","hashOfConfig":"14"},{"size":1392,"mtime":1674318817974,"results":"23","hashOfConfig":"14"},{"size":243,"mtime":1674335543780,"results":"24","hashOfConfig":"14"},{"size":1256,"mtime":1674342034417,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"3k0b9l",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\index.js",[],["55","56"],"C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\App.js",[],"C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\pages\\SavedBooks.js",[],"C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\pages\\SearchBooks.js",["57","58"],"import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\nimport { SAVE_BOOK } from '../utils/mutations';\nimport { useMutation } from '@apollo/client';\n\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n  const [saveBook, {error}] = useMutation(SAVE_BOOK)\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      // const response = await saveBook(bookToSave, token);\n\n      // if (!response.ok) {\n      //   throw new Error('something went wrong!');\n      // }\n\n      const { data } = await saveBook({\n        variables: { ...bookToSave }\n      })\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\components\\Navbar.js",[],"C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\components\\LoginForm.js",["59","60"],"// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\n\nimport { loginUser } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { LOGIN_USER } from '../utils/mutations';\nimport { QUERY_ME } from '../utils/queries';\n\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n\n  const [loginUser, {error} ] = useMutation(LOGIN_USER, {\n    update( cache, {data: { loginUser } }) {\n      try{\n        const { user } = cache.readQuery({ query: QUERY_ME });\n\n        cache.writeQuery({\n          query: QUERY_ME,\n          data: { user: [loginUser, ...user ] },\n        })\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  })\n\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      // const response = await loginUser(userFormData);\n\n      // if (!response.ok) {\n      //   throw new Error('something went wrong!');\n      // }\n\n      // const { token, user } = await response.json();\n      // console.log(user);\n      const { data } = await loginUser({\n        variables: userFormData\n      })\n\n      Auth.login(data.loginUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\components\\SignupForm.js",["61","62","63"],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { createUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nimport { ADD_USER } from '../utils/mutations';\nimport { QUERY_ME } from '../utils/queries';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error } ] = useMutation(ADD_USER)//, {\n  //   update(cache, { data: {addUser } }) {\n  //     try {\n  //       const { user } = cache.readQuery ({ query: QUERY_ME })\n\n  //       cache.createUser({\n  //         query: QUERY_ME,\n  //         data: { user: [addUser, ... user] }\n  //       })\n  //     } catch(e) {\n  //       console.error(e);\n  //     }\n  //   }\n  // })\n\n\n\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      // const response = await createUser(userFormData);\n\n      // if (!response.ok) {\n      //   throw new Error('something went wrong!');\n      // }\n\n      // const { token, user } = await response.json();\n      // console.log(user);\n      const { data } = await addUser({\n        variables: userFormData\n      })\n\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\utils\\auth.js",["64"],"// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\utils\\localStorage.js",[],"C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\utils\\API.js",[],"C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\utils\\queries.js",[],"C:\\Users\\samle\\bootcamp\\repositories\\book-search-engine\\client\\src\\utils\\mutations.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":18,"column":21,"nodeType":"71","messageId":"72","endLine":18,"endColumn":26},{"ruleId":"69","severity":1,"message":"73","line":77,"column":15,"nodeType":"71","messageId":"72","endLine":77,"endColumn":19},{"ruleId":"69","severity":1,"message":"74","line":6,"column":10,"nodeType":"71","messageId":"72","endLine":6,"endColumn":19},{"ruleId":"69","severity":1,"message":"70","line":18,"column":22,"nodeType":"71","messageId":"72","endLine":18,"endColumn":27},{"ruleId":"69","severity":1,"message":"75","line":4,"column":10,"nodeType":"71","messageId":"72","endLine":4,"endColumn":20},{"ruleId":"69","severity":1,"message":"76","line":8,"column":10,"nodeType":"71","messageId":"72","endLine":8,"endColumn":18},{"ruleId":"69","severity":1,"message":"70","line":18,"column":21,"nodeType":"71","messageId":"72","endLine":18,"endColumn":26},{"ruleId":"77","severity":1,"message":"78","line":49,"column":1,"nodeType":"79","endLine":49,"endColumn":34},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'loginUser' is defined but never used.","'createUser' is defined but never used.","'QUERY_ME' is defined but never used.","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]